Link al video: https://youtu.be/hm1SNg6M5yo

ORG 100 // Empezamos en el espacio de almacenamiento 100

FOR, LOAD I // Empezamos el ciclo FOR cargando la variable I a AC
SUBT FIFTY // Realizamos una operación para que se quede guardada en AC y podamos evaluar if (I < 50) con SKIPCOND 800
SKIPCOND 000 // Evaluamos if (I < 50)
JUMP FINISH // De no cumplirse la condición, saltamos a la línea donde se encuentra FINISH
INPUT / El usuario teclea un dato de medición
STOREI LECTOR // Guardamos el dato de medición en memoria mediante Direccionamiento Indirecto
LOADI LECTOR // Cargamos el espacio de memoria al que apunta LECTOR a AC
ADD ACUM // Añadimos a AC el valor de ACUM
STORE ACUM // Guardamos el resultado en ACUM
LOAD LECTOR // Cargamos LECTOR a AC
ADD ONEH // Añadimos ONEH(1 base 16) para recorrer el espacio de memoria
STORE LECTOR // Guardamos mediante Direccionamiento Indirecto en el espacio de memoria consecutivo el dato
LOAD I // Cargamos I a AC
ADD ONE // Añadimos ONE(1) al valor dentro de AC
STORE I // Guardamos el resultado de la operación anterior en I
JUMP FOR // Saltamos directamente al inicio del ciclo

WHILE, LOAD ACUM //Cargamos ACUM a AC
SUBT FIFTY //Realizamos una operación para comparar en un if (skipcond)
STORE ACUM //Guardamos valor en la variable ACUM
SKIPCOND 800 //if (ACUM > FIFTY)
JUMP FINISH //Saltamos a FINISH
LOAD PROM //Cargamos PROM a AC
ADD ONE //Añadimos 1 al valor en AC
STORE PROM //Guardamos valor en la variable PROM
JUMP WHILE //Repetimos el ciclo mediante un salto de línea al principio del mismo

INCREMENTO, LOAD PROM //Cargamos PROM a AC
ADD ONE //Añadimos 1 al valor en AC
STORE PROM //Guardamos el valor en PROM
LOAD ACUM //Cargamos ACUM en AC
SUBT FIFTY //Restamos el valor de AC con FIFTY
STORE ACUM //Guardamos valor en variable ACUM

FINISH, LOAD ACUM //Cargamos ACUM en AC
SKIPCOND 000 //if (X < 0)
JUMP INCREMENTO //Si la condición es falsa, hacemos salto al inicio del ciclo
LOAD PROM //Cargamos PROM en AC
OUTPUT /Desplegamos en la consola el valor en AC
LOAD 0 // Cargamos 0 a AC
STORE I // Reiniciamos el valor de I a 0
STORE ACUM // Reiniciamos el valor de ACUM a 0
STORE PROM // Reiniciamos el valor de PROM a 0
JUMP FOR // Volvemos a repetir todo el proceso con 50 datos nuevas saltando al FOR
//HALT /Finalizamos el programa

ONE, DEC 1 // Declaración de la variable ONE = 1 en decimal
ONEH, HEX 1 //Declaración de la variable ONEH = 1 en hexadecimal
FIFTY, DEC 50 // Declaración de la variable FIFTY = 50 en decimal
I, DEC 0 // Declaración de la variable I = 10 en decimal
ACUM, DEC 0 // Declaración de la variable ACUM = 0 en decimal
PROM, DEC 0 // Declaración de la variable PROM = 0 en decimal
LECTOR, HEX 140 // Declaración de la variable LECTOR = 140 haciendo referencia a un espacio de memoria específico

51
453
287
83
55
82
446
271
52
450
183
396
241
98
249
143
464
299
240
129
431
378
415
194
294
408
155
255
343
281
392
425
493
276
457
446
410
319
415
381
336
111
331
402
411
318
484
346
87
125